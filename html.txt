<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QuantumGuard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0f172a;
            color: #e2e8f0;
        }
        .container {
            width: 100%;
            max-width: 1200px;
        }
        .card {
            background-color: #1e293b;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .header-bg {
            background: linear-gradient(90deg, #6366f1, #3b82f6);
        }
        .btn {
            transition: background-color 0.3s ease, transform 0.1s ease;
        }
        .btn:hover {
            transform: scale(1.05);
        }
        .animate-pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: .5; }
        }
        .modal {
            background-color: rgba(0, 0, 0, 0.75);
            backdrop-filter: blur(5px);
        }
        #chart-container {
            position: relative;
            height: 300px;
        }
        .dot {
            position: absolute;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            transition: all 0.2s ease-in-out;
            cursor: pointer;
        }
        .risk-low {
            background-color: #22c55e; /* green-500 */
        }
        .risk-medium {
            background-color: #f59e0b; /* yellow-500 */
        }
        .risk-high {
            background-color: #ef4444; /* red-500 */
        }
        .dot:hover {
            transform: scale(2);
            z-index: 10;
        }
        #map-container {
            width: 100%;
            height: 250px;
            background-color: #111827;
            border-radius: 0.5rem;
            overflow: hidden;
            position: relative;
        }
        #map-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: center;
        }
        #map-pin {
            position: absolute;
            width: 24px;
            height: 24px;
            transform: translate(-50%, -100%);
            z-index: 1;
        }
        #transaction-log {
            max-height: 300px;
            overflow-y: auto;
            background-color: #0f172a;
            border-radius: 0.5rem;
            padding: 1rem;
        }
        .log-item {
            cursor: pointer;
            padding: 0.5rem 0.75rem;
            margin-bottom: 0.25rem;
            border-radius: 0.5rem;
            transition: background-color 0.2s ease;
        }
        .log-item:hover {
            background-color: #1e293b;
        }
        .risk-low-log {
            color: #22c55e;
        }
        .risk-medium-log {
            color: #f59e0b;
        }
        .risk-high-log {
            color: #ef4444;
            font-weight: bold;
        }
        .alert-box {
            position: fixed;
            top: 2rem;
            right: 2rem;
            background-color: #be123c;
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 0.75rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
            z-index: 50;
            display: none;
            animation: fadeInOut 4s forwards;
        }
        @keyframes fadeInOut {
            0% { opacity: 0; transform: translateY(-20px); }
            10% { opacity: 1; transform: translateY(0); }
            90% { opacity: 1; transform: translateY(0); }
            100% { opacity: 0; transform: translateY(-20px); }
        }
        .ticker-container {
            overflow: hidden;
            white-space: nowrap;
        }
        .ticker-item {
            display: inline-block;
            animation: ticker-scroll 20s linear infinite;
        }
        @keyframes ticker-scroll {
            from { transform: translateX(100%); }
            to { transform: translateX(-100%); }
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-200">

    <!-- Main Container -->
    <div id="main-dashboard" class="container mx-auto p-6 md:p-10">
        <!-- Header -->
        <header class="text-center mb-12">
            <h1 class="4xl md:text-5xl font-bold header-bg text-transparent bg-clip-text pb-2">QuantumGuard</h1>
            <p class="text-lg md:text-xl text-gray-400 mt-2">The Future of Fraud Detection</p>
        </header>

        <!-- Threat Intelligence Feed Panel -->
        <div class="card p-4 rounded-xl mb-6">
            <h2 class="text-xl font-bold mb-2 flex items-center">
                <svg class="w-6 h-6 mr-2 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd"></path>
                </svg>
                Threat Intelligence Feed
            </h2>
            <div class="ticker-container">
                <span class="ticker-item text-yellow-400">
                    [ALERT] Phishing campaign targeting fintech users in Europe. |
                    [UPDATE] Stolen card data being sold on the dark web. |
                    [WARNING] New fake account registration bot detected. |
                    [ALERT] DDoS attack on a major e-commerce platform.
                </span>
            </div>
        </div>

        <!-- Mode Selector -->
        <div class="flex justify-center mb-8 space-x-4">
            <button id="preloaded-data-btn" class="btn bg-indigo-600 hover:bg-indigo-500 text-white font-bold py-2 px-4 rounded-lg shadow-lg">
                Preloaded Data
            </button>
            <button id="realtime-input-btn" class="btn bg-gray-600 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-lg shadow-lg">
                Real-time Input
            </button>
            <button id="transcript-analyzer-btn" class="btn bg-gray-600 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-lg shadow-lg">
                Transcript Analyzer
            </button>
        </div>

        <!-- Main Dashboard Grid -->
        <main class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">

            <!-- Preloaded Data Panels -->
            <div id="preloaded-panels" class="contents">
                <div class="card p-6 rounded-xl col-span-1">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <svg class="w-6 h-6 mr-2 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" fill-rule="evenodd"></path>
                        </svg>
                        User Role
                    </h2>
                    <div class="space-y-4">
                        <div class="flex items-center justify-between">
                            <p class="text-gray-400">Current Role:</p>
                            <select id="user-role-select" class="bg-gray-700 text-white rounded-lg p-2 focus:outline-none">
                                <option value="analyst">Analyst</option>
                                <option value="admin">Admin</option>
                            </select>
                        </div>
                    </div>
                    <div class="mt-6">
                        <h2 class="text-xl font-bold mb-4 flex items-center">
                            <svg class="w-6 h-6 mr-2 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                            </svg>
                            Controls
                        </h2>
                        <button id="start-detection-btn" class="w-full btn bg-indigo-600 hover:bg-indigo-500 text-white font-bold py-3 px-6 rounded-lg shadow-lg">
                            Start Detection
                        </button>
                        <button id="stop-detection-btn" class="w-full btn bg-red-600 hover:bg-red-500 text-white font-bold py-3 px-6 rounded-lg shadow-lg mt-2 hidden">
                            Stop
                        </button>
                        <button id="reset-btn" class="w-full btn bg-gray-600 hover:bg-gray-500 text-white font-bold py-3 px-6 rounded-lg shadow-lg mt-2">
                            Reset
                        </button>
                        <button id="export-log-btn" class="w-full btn bg-gray-600 hover:bg-gray-500 text-white font-bold py-3 px-6 rounded-lg shadow-lg mt-2">
                            Export Audit Log (CSV)
                        </button>
                    </div>
                </div>

                <div class="card p-6 rounded-xl col-span-1 lg:col-span-2">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <svg class="w-6 h-6 mr-2 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM6.5 9a1.5 1.5 0 100-3 1.5 1.5 0 000 3zm7.5-1.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zm-2.5 5.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z" clip-rule="evenodd"></path>
                        </svg>
                        QML Anomaly Map
                    </h2>
                    <div id="chart-container" class="w-full relative bg-gray-800 rounded-lg overflow-hidden">
                        <div id="loading-overlay" class="absolute inset-0 flex items-center justify-center bg-gray-800 bg-opacity-75 z-20 hidden">
                            <div class="text-center">
                                <svg class="animate-spin h-10 w-10 text-white mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                <p class="mt-2 text-white flex items-center justify-center">
                                    <span class="text-indigo-400 mr-2">
                                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M9.75 21l-4.5-4.5m0 0l-4.5-4.5m4.5 4.5h21" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5"></path></svg>
                                    </span>
                                    Quantum Processing...
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card p-6 rounded-xl col-span-1 md:col-span-2 lg:col-span-1">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <svg class="w-6 h-6 mr-2 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z"></path>
                        </svg>
                        Performance Metrics
                    </h2>
                    <div class="space-y-4">
                        <div class="flex items-center justify-between">
                            <p class="text-gray-400">Total Frauds Detected:</p>
                            <span id="metrics-fraud" class="text-xl font-bold text-red-400">0</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <p class="text-gray-400">Avg Detection Time:</p>
                            <span id="metrics-time" class="text-xl font-bold text-blue-400">0s</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <p class="text-gray-400">Avg Model Confidence:</p>
                            <span id="metrics-confidence" class="text-xl font-bold text-green-400">0%</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <p class="text-gray-400">Quantum Circuit Used:</p>
                            <span class="text-sm font-semibold text-gray-400">4-qubit Kernel</span>
                        </div>
                    </div>
                    <div class="mt-6">
                        <h2 class="text-xl font-bold mb-4 flex items-center">
                            <svg class="w-6 h-6 mr-2 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M12 9v2m0 4h.01m-6.938 4.755A8.962 8.962 0 013.2 14a8.962 8.962 0 01-2.28-5.839c-.06-.593.187-1.19.645-1.571L8.38 2.275a2 2 0 013.24 0l7.734 8.12a2 2 0 01.646 1.571A8.962 8.962 0 0116.8 14a8.962 8.962 0 01-2.52 5.755l-2.074-.53a.5.5 0 01-.19-.115L12 18.064l-.014-.014a.5.5 0 01-.19.115l-2.074.53z" stroke-width="1.5"></path>
                            </svg>
                            Model Comparison
                        </h2>
                        <div class="space-y-2">
                            <div class="flex justify-between items-center text-gray-400">
                                <span class="font-bold">Classical ML</span>
                                <span id="classical-accuracy">0% Acc</span>
                                <span id="classical-fp">0% FP</span>
                            </div>
                            <div class="flex justify-between items-center">
                                <span class="font-bold text-blue-400">Quantum ML</span>
                                <span id="quantum-accuracy" class="text-blue-400">0% Acc</span>
                                <span id="quantum-fp" class="text-blue-400">0% FP</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Real-time Input Panels -->
            <div id="realtime-panels" class="hidden grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 col-span-full">
                <div class="card p-6 rounded-xl col-span-1">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <svg class="w-6 h-6 mr-2 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M9 12a2 2 0 100-4 2 2 0 000 4z" stroke-width="1.5"></path>
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"></path>
                        </svg>
                        Input Transaction
                    </h2>
                    <div class="space-y-4">
                        <div>
                            <label for="input-amount" class="text-gray-400 text-sm">Amount ($)</label>
                            <input type="number" id="input-amount" placeholder="e.g., 2000.00" class="w-full bg-gray-700 text-white p-2 rounded-lg mt-1 focus:outline-none">
                        </div>
                        <div>
                            <label for="input-time" class="text-gray-400 text-sm">Time (0-23 hr)</label>
                            <input type="number" id="input-time" placeholder="e.g., 14" min="0" max="23" class="w-full bg-gray-700 text-white p-2 rounded-lg mt-1 focus:outline-none">
                        </div>
                        <div>
                            <label for="input-location" class="text-gray-400 text-sm">Location</label>
                            <input type="text" id="input-location" placeholder="e.g., Domestic" class="w-full bg-gray-700 text-white p-2 rounded-lg mt-1 focus:outline-none">
                        </div>
                    </div>
                    <div class="mt-6">
                        <button id="submit-transaction-btn" class="w-full btn bg-blue-600 hover:bg-blue-500 text-white font-bold py-3 px-6 rounded-lg shadow-lg">
                            Submit Transaction
                        </button>
                    </div>
                </div>

                <div class="card p-6 rounded-xl col-span-2">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <svg class="w-6 h-6 mr-2 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" stroke-width="1.5"></path>
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"></path>
                        </svg>
                        Live Results
                    </h2>
                    <div class="bg-gray-800 p-4 rounded-lg min-h-[24rem] flex flex-col justify-between">
                        <table class="w-full text-sm text-left text-gray-400 flex-grow">
                            <thead>
                                <tr class="border-b border-gray-700">
                                    <th scope="col" class="py-3 px-4">ID</th>
                                    <th scope="col" class="py-3 px-4">AMOUNT</th>
                                    <th scope="col" class="py-3 px-4">PREDICTION</th>
                                    <th scope="col" class="py-3 px-4">P(F)</th>
                                </tr>
                            </thead>
                            <tbody id="live-results-table">
                                <tr class="text-gray-300">
                                    <td class="py-3 px-4">N/A</td>
                                    <td class="py-3 px-4">N/A</td>
                                    <td class="py-3 px-4">N/A</td>
                                    <td class="py-3 px-4">N/A</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="card p-6 rounded-xl col-span-1 lg:col-span-3">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <svg class="w-6 h-6 mr-2 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10 18a8 8 0 100-16 8 8 0 000 16zM6 9a2 2 0 11-4 0 2 2 0 014 0zM16 9a2 2 0 11-4 0 2 2 0 014 0zM8 15a2 2 0 11-4 0 2 2 0 014 0zM14 15a2 2 0 11-4 0 2 2 0 014 0z" stroke-width="1.5"></path>
                        </svg>
                        Fraud Probability Trend
                    </h2>
                    <div id="trend-chart-container" class="w-full relative bg-gray-800 rounded-lg overflow-hidden h-64">
                        <canvas id="trend-chart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Transcript Analyzer Panels -->
            <div id="analyzer-panels" class="hidden grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 col-span-full">
                <div class="card p-6 rounded-xl col-span-1">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <svg class="w-6 h-6 mr-2 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M9 12a2 2 0 100-4 2 2 0 000 4z" stroke-width="1.5"></path>
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"></path>
                        </svg>
                        Input Transcript
                    </h2>
                    <div class="space-y-4">
                        <input type="file" id="file-upload" class="hidden" accept=".txt, .csv, .pdf">
                        <button id="upload-transcript-btn" class="w-full btn bg-blue-600 hover:bg-blue-500 text-white font-bold py-3 px-6 rounded-lg shadow-lg">
                            Upload Transcript (.txt / .csv / .pdf)
                        </button>
                        <span id="file-name" class="text-gray-400">No file selected.</span>
                    </div>
                </div>

                <div id="analyzer-results" class="col-span-2">
                    <div class="card p-6 rounded-xl h-full flex flex-col">
                        <h3 class="text-xl font-bold mb-4 flex items-center">
                            <svg class="w-6 h-6 mr-2 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M9 12a2 2 0 100-4 2 2 0 000 4z" stroke-width="1.5"></path>
                                <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"></path>
                            </svg>
                            Analysis Results
                        </h3>
                        <div class="overflow-x-auto rounded-lg bg-gray-800 p-4">
                            <table class="w-full text-sm text-left text-gray-400">
                                <thead>
                                    <tr class="border-b border-gray-700">
                                        <th class="py-2 px-4">ID</th>
                                        <th class="py-2 px-4">Amount</th>
                                        <th class="py-2 px-4">Time</th>
                                        <th class="py-2 px-4">Prediction</th>
                                        <th class="py-2 px-4">Risk Score</th>
                                        <th class="py-2 px-4">Explanation</th>
                                    </tr>
                                </thead>
                                <tbody id="analyzer-results-body">
                                    <tr class="text-gray-300">
                                        <td class="py-2 px-4" colspan="6">Upload a file to see results.</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                
                <div class="card p-6 rounded-xl col-span-full">
                    <h3 class="text-xl font-bold mb-4 flex items-center">
                        <svg class="w-6 h-6 mr-2 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z"></path>
                        </svg>
                        Analysis Summary
                    </h3>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div class="bg-gray-800 p-4 rounded-lg text-center">
                            <h4 class="font-bold text-gray-400">Total Analyzed</h4>
                            <p id="analyzer-summary-total" class="text-3xl font-bold text-blue-400 mt-1">0</p>
                        </div>
                        <div class="bg-gray-800 p-4 rounded-lg text-center">
                            <h4 class="font-bold text-gray-400">Frauds Detected</h4>
                            <p id="analyzer-summary-fraud" class="text-3xl font-bold text-red-400 mt-1">0</p>
                        </div>
                        <div class="bg-gray-800 p-4 rounded-lg text-center">
                            <h4 class="font-bold text-gray-400">Avg. Confidence</h4>
                            <p id="analyzer-summary-confidence" class="text-3xl font-bold text-green-400 mt-1">0%</p>
                        </div>
                    </div>
                    <button id="export-analyzer-log-btn" class="w-full btn bg-gray-600 hover:bg-gray-500 text-white font-bold py-3 px-6 rounded-lg shadow-lg mt-4">
                        Export Results (CSV)
                    </button>
                </div>
            </div>

            <!-- New High-Risk Profiles Panel -->
            <div id="high-risk-profiles-panel" class="card p-6 rounded-xl col-span-1">
                <h2 class="text-xl font-bold mb-4 flex items-center">
                    <svg class="w-6 h-6 mr-2 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10 2a8 8 0 00-8 8c0 4.42 3.58 8 8 8s8-3.58 8-8c0-4.42-3.58-8-8-8zm0 14a6 6 0 100-12 6 6 0 000 12zM10 6a1 1 0 011 1v4a1 1 0 01-2 0V7a1 1 0 011-1zm-1 6a1 1 0 011 1v.01a1 1 0 01-2 0V13a1 1 0 011-1z"></path>
                    </svg>
                    High-Risk Profiles
                </h2>
                <div id="high-risk-profiles-list" class="text-sm">
                    <p class="text-gray-500">No high-risk transactions detected yet.</p>
                </div>
            </div>
            
            <!-- Common Log Panel -->
            <div class="card p-6 rounded-xl col-span-2">
                <h2 class="text-xl font-bold mb-4 flex items-center">
                    <svg class="w-6 h-6 mr-2 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM4 11a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM4 15a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1z"></path>
                    </svg>
                    Transaction Log
                </h2>
                <div id="transaction-log" class="text-sm">
                    <p class="text-gray-500">Press 'Start Detection' to begin logging transactions.</p>
                </div>
            </div>
        </main>
        
        <!-- Real-time alert -->
        <div id="alert-box" class="alert-box">
            <p class="font-bold">🚨 FRAUD ALERT! 🚨</p>
            <p id="alert-message"></p>
        </div>

        <!-- Transaction Details Modal -->
        <div id="modal" class="modal fixed inset-0 flex items-center justify-center p-4 hidden">
            <div class="bg-gray-800 p-8 rounded-xl max-w-lg w-full relative border border-indigo-700">
                <button id="close-modal-btn" class="absolute top-4 right-4 text-gray-400 hover:text-gray-200">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
                <h3 class="2xl font-bold mb-4 text-blue-300">Transaction Details</h3>
                <div id="modal-content" class="space-y-3 text-gray-400">
                    <!-- Details will be injected here -->
                </div>

                <div id="fraud-actions-panel" class="mt-6 space-y-2 hidden">
                    <p class="text-lg font-bold text-red-400">Required Action</p>
                    <button id="false-positive-btn" class="w-full btn bg-gray-600 hover:bg-gray-500 text-white font-bold py-3 px-6 rounded-lg">
                        Mark as False Positive
                    </button>
                    <button id="freeze-account-btn" class="w-full btn bg-yellow-600 hover:bg-yellow-500 text-white font-bold py-3 px-6 rounded-lg">
                        Freeze Account
                    </button>
                    <button id="escalate-btn" class="w-full btn bg-red-600 hover:bg-red-500 text-white font-bold py-3 px-6 rounded-lg">
                        Escalate to Analyst
                    </button>
                </div>
                
                <button id="track-location-btn" class="w-full btn bg-blue-600 hover:bg-blue-500 text-white font-bold py-3 px-6 rounded-lg shadow-lg mt-4">
                    Track Location
                </button>
            </div>
        </div>

        <!-- Transaction History Modal -->
        <div id="history-modal" class="modal fixed inset-0 flex items-center justify-center p-4 hidden">
            <div class="bg-gray-800 p-8 rounded-xl max-w-2xl w-full relative border border-indigo-700">
                <button id="close-history-modal-btn" class="absolute top-4 right-4 text-gray-400 hover:text-gray-200">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
                <h3 class="2xl font-bold mb-4 text-blue-300">Transaction History for <span id="history-sender-name"></span></h3>
                <div class="space-y-4">
                    <div class="bg-gray-700 p-4 rounded-lg">
                        <p class="text-gray-400">Total Transactions: <span id="history-total-tx"></span></p>
                        <p class="text-gray-400">Total Fraudulent: <span id="history-fraud-tx" class="text-red-400"></span></p>
                    </div>
                    <div id="history-list" class="bg-gray-700 p-4 rounded-lg overflow-y-auto max-h-96">
                        <!-- History items will be injected here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
    <script>
        Chart.register(ChartDataLabels);
        document.addEventListener('DOMContentLoaded', () => {
            const mainDashboard = document.getElementById('main-dashboard');
            const chartContainer = document.getElementById('chart-container');
            const totalTransactionsEl = document.getElementById('total-transactions');
            const fraudCountEl = document.getElementById('fraud-count');
            const normalCountEl = document.getElementById('normal-count');
            const startDetectionBtn = document.getElementById('start-detection-btn');
            const stopDetectionBtn = document.getElementById('stop-detection-btn');
            const resetBtn = document.getElementById('reset-btn');
            const exportLogBtn = document.getElementById('export-log-btn');
            const loadingOverlay = document.getElementById('loading-overlay');
            const modal = document.getElementById('modal');
            const closeModalBtn = document.getElementById('close-modal-btn');
            const modalContent = document.getElementById('modal-content');
            const fraudActionsPanel = document.getElementById('fraud-actions-panel');
            const falsePositiveBtn = document.getElementById('false-positive-btn');
            const freezeAccountBtn = document.getElementById('freeze-account-btn');
            const escalateBtn = document.getElementById('escalate-btn');
            const trackLocationBtn = document.getElementById('track-location-btn');
            const transactionLog = document.getElementById('transaction-log');
            const alertBox = document.getElementById('alert-box');
            const alertMessage = document.getElementById('alert-message');
            const userRoleSelect = document.getElementById('user-role-select');

            const preloadedDataBtn = document.getElementById('preloaded-data-btn');
            const realtimeInputBtn = document.getElementById('realtime-input-btn');
            const transcriptAnalyzerBtn = document.getElementById('transcript-analyzer-btn');
            const preloadedPanels = document.getElementById('preloaded-panels');
            const realtimePanels = document.getElementById('realtime-panels');
            const analyzerPanels = document.getElementById('analyzer-panels');
            
            const inputAmount = document.getElementById('input-amount');
            const inputTime = document.getElementById('input-time');
            const inputLocation = document.getElementById('input-location');
            const submitTransactionBtn = document.getElementById('submit-transaction-btn');
            const liveResultsTable = document.getElementById('live-results-table');
            const trendChartCanvas = document.getElementById('trend-chart');
            const fileName = document.getElementById('file-name');

            const metricsFraudEl = document.getElementById('metrics-fraud');
            const metricsTimeEl = document.getElementById('metrics-time');
            const metricsConfidenceEl = document.getElementById('metrics-confidence');
            const classicalAccuracyEl = document.getElementById('classical-accuracy');
            const classicalFPEl = document.getElementById('classical-fp');
            const quantumAccuracyEl = document.getElementById('quantum-accuracy');
            const quantumFPEl = document.getElementById('quantum-fp');

            const highRiskProfilesList = document.getElementById('high-risk-profiles-list');
            const historyModal = document.getElementById('history-modal');
            const closeHistoryModalBtn = document.getElementById('close-history-modal-btn');
            const historySenderName = document.getElementById('history-sender-name');
            const historyTotalTx = document.getElementById('history-total-tx');
            const historyFraudTx = document.getElementById('history-fraud-tx');
            const historyList = document.getElementById('history-list');
            
            const uploadBtn = document.getElementById('upload-transcript-btn');
            const fileInput = document.getElementById('file-upload');
            const analyzerResultsBody = document.getElementById('analyzer-results-body');
            const analyzerSummaryTotal = document.getElementById('analyzer-summary-total');
            const analyzerSummaryFraud = document.getElementById('analyzer-summary-fraud');
            const analyzerSummaryConfidence = document.getElementById('analyzer-summary-confidence');
            const exportAnalyzerLogBtn = document.getElementById('export-analyzer-log-btn');
            
            const pieChartCanvas = document.getElementById('pie-chart-canvas');
            const pieChartPlaceholder = document.getElementById('pie-chart-placeholder');

            let trendChart;
            let pieChart;
            
            const updateChartSize = () => {
                if (chartContainer) {
                    const width = chartContainer.offsetWidth;
                    const height = 300;
                    chartContainer.style.height = `${height}px`;
                    return { width, height };
                }
                return { width: 0, height: 0 };
            };
            let { width, height } = updateChartSize();
            window.addEventListener('resize', () => {
                ({ width, height } = updateChartSize());
                drawDots();
            });

            const transactions = [];
            let isGenerating = false;
            let currentTx = null;
            let transactionCounter = 0;
            let totalFraud = 0;
            let highRiskProfiles = {};
            let analyzerResults = [];

            const locations = [
                { city: "New York, USA", lat: 40.7128, lon: -74.0060 },
                { city: "London, UK", lat: 51.5074, lon: -0.1278 },
                { city: "Tokyo, Japan", lat: 35.6895, lon: 139.6917 },
                { city: "Sydney, Australia", lat: -33.8688, lon: 151.2093 },
                { city: "Dubai, UAE", lat: 25.2769, lon: 55.2963 },
                { city: "Rio de Janeiro, Brazil", lat: -22.9068, lon: -43.1729 },
                { city: "Lagos, Nigeria", lat: 6.5244, lon: 3.3792 }
            ];
            const senderNames = ["Alice Smith", "Bob Johnson", "Charlie Brown", "Diana Prince", "Eddie Van Halen", "Frank Miller", "Grace Hopper", "Ivan Pavlov"];
            const receiverNames = ["GlobalCorp Inc.", "E-Commerce Solutions", "Fintech Innovations", "Tech Ventures", "Local Mart", "Web Services Co."];
            const paymentMethods = ["Credit Card", "Debit Card", "UPI", "Wire Transfer", "PayPal"];
            const deviceFingerprints = ["Mobile", "Desktop", "ATM", "POS Machine"];
            const merchantCategories = ["Shopping", "Gambling", "Travel", "Crypto"];

            const drawDots = () => {
                if (chartContainer) {
                    chartContainer.innerHTML = '';
                    if (loadingOverlay) chartContainer.appendChild(loadingOverlay);
                    transactions.forEach(tx => drawSingleDot(tx));
                }
            };

            const generateSingleTransaction = () => {
                const x = Math.random() * width;
                const y = Math.random() * height;
                const amount = (Math.random() * 5000 + 10).toFixed(2);
                const time = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true });
                const sender = senderNames[Math.floor(Math.random() * senderNames.length)];
                const receiver = receiverNames[Math.floor(Math.random() * receiverNames.length)];
                const paymentMethod = paymentMethods[Math.floor(Math.random() * paymentMethods.length)];
                const deviceFingerprint = deviceFingerprints[Math.floor(Math.random() * deviceFingerprints.length)];
                const merchantCategory = merchantCategories[Math.floor(Math.random() * merchantCategories.length)];
                const userHistoryScore = Math.floor(Math.random() * 50);

                let riskScore;
                let fraudStatus;
                let reason;

                if (Math.random() < 0.15) {
                    riskScore = Math.random() * 29 + 71;
                    fraudStatus = "risk-high";
                    reason = "Unusually high transaction volume combined with an uncharacteristic location.";
                } else if (Math.random() < 0.3) {
                    riskScore = Math.random() * 29 + 41;
                    fraudStatus = "risk-medium";
                    reason = "High-value transaction from a new international location, outside of typical spending patterns.";
                } else {
                    riskScore = Math.random() * 40;
                    fraudStatus = "risk-low";
                    reason = "Transaction amount and location are consistent with historical user behavior.";
                }

                const confidence = (Math.random() * (100 - riskScore) + riskScore).toFixed(2);
                
                return {
                    id: Date.now(),
                    x, y, amount, time,
                    riskScore: riskScore.toFixed(2),
                    confidence: confidence,
                    fraudStatus: fraudStatus,
                    reason: reason,
                    ip: `192.168.1.${Math.floor(Math.random() * 255)}`,
                    device: deviceFingerprint,
                    location: locations[Math.floor(Math.random() * locations.length)],
                    sender: sender,
                    receiver: receiver,
                    paymentMethod: paymentMethod,
                    merchantCategory: merchantCategory,
                    userHistoryScore: userHistoryScore
                };
            };
            
            const processRealtimeTransaction = (amount, time, location) => {
                let riskScore = 0;
                let fraudStatus = "risk-low";
                let reason = "Transaction parameters are consistent with historical data.";
                const probability = Math.random();

                const parsedAmount = parseFloat(amount);
                const parsedTime = parseFloat(time);

                if (parsedAmount > 1000) riskScore += 20;
                if (parsedAmount > 5000) riskScore += 30;
                if (location.toLowerCase() === 'international') riskScore += 40;
                if (parsedTime < 6 || parsedTime > 22) riskScore += 20;
                if (probability > 0.8) riskScore += 10;

                if (riskScore > 70) {
                    fraudStatus = "risk-high";
                    reason = `Combined factors of high amount ($${parsedAmount}) and a new international location led to a high risk score.`;
                } else if (riskScore > 40) {
                    fraudStatus = "risk-medium";
                    reason = `Suspiciously high transaction amount ($${parsedAmount}) and unusual time (${parsedTime}hr) for this user.`;
                } else {
                    fraudStatus = "risk-low";
                    reason = `Transaction amount ($${parsedAmount}) and details fall within normal behavioral patterns.`;
                }

                const sender = senderNames[Math.floor(Math.random() * senderNames.length)];
                const receiver = receiverNames[Math.floor(Math.random() * receiverNames.length)];
                
                const newTx = {
                    id: Date.now(),
                    amount: parsedAmount.toFixed(2),
                    time: `${parsedTime}hr`,
                    riskScore: riskScore.toFixed(2),
                    confidence: (100 - riskScore).toFixed(2),
                    fraudStatus: fraudStatus,
                    reason: reason,
                    ip: `192.168.1.${Math.floor(Math.random() * 255)}`,
                    location: { city: location, lat: locations[0].lat, lon: locations[0].lon },
                    sender: sender,
                    receiver: receiver,
                };

                transactions.push(newTx);
                transactionCounter++;
                addTransactionToLog(newTx);
                updateStats();
                updateLiveResults(newTx);
                updateTrendChart(newTx);
                updatePieChart();
            };

            const processTranscriptAnalysis = (fileContent) => {
                const lines = fileContent.trim().split('\n');
                analyzerResults = [];
                let totalAnalyzed = 0;
                let totalFrauds = 0;
                let totalSuspicious = 0;
                let totalNormal = 0;
                let totalConfidence = 0;
                
                if (analyzerResultsBody) analyzerResultsBody.innerHTML = '';
                
                const dataLines = lines.slice(1);

                dataLines.forEach((line, index) => {
                    const parts = line.split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/).map(part => part.trim().replace(/^"|"$/g, ''));
                    if (parts.length < 10) return;

                    const id = parts[0];
                    const time = parts[1];
                    const amount = parts[2];
                    const riskScore = parts[3];
                    const reason = parts[4];
                    const fraudStatus = parts[5];
                    const ip = parts[6];
                    const location = parts[7];
                    const sender = parts[8];
                    const receiver = parts[9];

                    totalAnalyzed++;
                    if (fraudStatus === 'risk-high') {
                        totalFrauds++;
                    } else if (fraudStatus === 'risk-medium') {
                        totalSuspicious++;
                    } else {
                        totalNormal++;
                    }

                    totalConfidence += parseFloat(riskScore);
                    
                    const resultItem = document.createElement('tr');
                    let predictionColor = 'text-green-400';
                    if (fraudStatus === 'risk-high') predictionColor = 'text-red-400';
                    else if (fraudStatus === 'risk-medium') predictionColor = 'text-yellow-400';
                    
                    resultItem.innerHTML = `
                        <td class="py-2 px-4">${id}</td>
                        <td class="py-2 px-4">$${parseFloat(amount.replace(/[^0-9.]/g, '')).toFixed(2)}</td>
                        <td class="py-2 px-4">${time}</td>
                        <td class="py-2 px-4 ${predictionColor}">${fraudStatus === 'risk-high' ? 'Fraud' : fraudStatus === 'risk-medium' ? 'Suspicious' : 'Safe'}</td>
                        <td class="py-2 px-4">${riskScore}</td>
                        <td class="py-2 px-4">${reason}</td>
                    `;
                    if (analyzerResultsBody) analyzerResultsBody.appendChild(resultItem);
                    analyzerResults.push({
                        id: id,
                        amount: parseFloat(amount.replace(/[^0-9.]/g, '')).toFixed(2),
                        time: time,
                        prediction: fraudStatus,
                        riskScore: riskScore,
                        explanation: reason,
                        sender: sender
                    });

                    if (fraudStatus === 'risk-high') {
                        if (!highRiskProfiles[sender]) {
                            highRiskProfiles[sender] = [];
                        }
                        highRiskProfiles[sender].push({
                            id: id,
                            amount: amount,
                            time: time,
                            riskScore: riskScore,
                            fraudStatus: fraudStatus,
                            reason: reason,
                            location: { city: location },
                            sender: sender
                        });
                    }
                });

                updateHighRiskProfilesList();
                if (analyzerSummaryTotal) analyzerSummaryTotal.textContent = totalAnalyzed;
                if (analyzerSummaryFraud) analyzerSummaryFraud.textContent = totalFrauds;
                if (analyzerSummaryConfidence) analyzerSummaryConfidence.textContent = `${(totalConfidence / totalAnalyzed).toFixed(2)}%`;
            };


            const updateLiveResults = (tx) => {
                if (liveResultsTable) {
                    liveResultsTable.innerHTML = '';
                    const row = document.createElement('tr');
                    const predictionColor = tx.fraudStatus === 'risk-high' ? 'text-red-400' : 'text-green-400';
                    const predictionText = tx.fraudStatus === 'risk-high' ? 'Fraudulent' : 'Normal';
                    row.innerHTML = `
                        <td class="py-3 px-4">${transactionCounter}</td>
                        <td class="py-3 px-4">$${tx.amount}</td>
                        <td class="py-3 px-4 ${predictionColor}">${predictionText}</td>
                        <td class="py-3 px-4">${(parseFloat(tx.riskScore) / 100).toFixed(2)}</td>
                    `;
                    liveResultsTable.appendChild(row);
                }
            };
            
            const updateTrendChart = (tx) => {
                if (trendChart) {
                    trendChart.data.labels.push(transactions.length);
                    trendChart.data.datasets[0].data.push(parseFloat(tx.riskScore) / 100);
                    if (trendChart.data.labels.length > 10) {
                        trendChart.data.labels.shift();
                        trendChart.data.datasets[0].data.shift();
                    }
                    trendChart.update();
                }
            };
            
            const updatePieChart = () => {
                if (pieChart) {
                    const normalCount = transactions.filter(tx => tx.fraudStatus === 'risk-low').length;
                    const suspiciousCount = transactions.filter(tx => tx.fraudStatus === 'risk-medium').length;
                    const fraudCount = transactions.filter(tx => tx.fraudStatus === 'risk-high').length;
                    pieChart.data.datasets[0].data = [normalCount, suspiciousCount, fraudCount];
                    pieChart.update();
                    if (normalCount + suspiciousCount + fraudCount > 0) {
                        if (pieChartPlaceholder) pieChartPlaceholder.classList.add('hidden');
                        if (pieChartCanvas) pieChartCanvas.classList.remove('hidden');
                    } else {
                        if (pieChartPlaceholder) pieChartPlaceholder.classList.remove('hidden');
                        if (pieChartCanvas) pieChartCanvas.classList.add('hidden');
                    }
                }
            };

            const addTransactionToLog = (tx) => {
                const logItem = document.createElement('div');
                logItem.className = `log-item ${tx.fraudStatus}-log`;
                
                const logMessage = `
                    <span class="font-bold">[${transactionCounter}]</span>
                    <span>$${tx.amount} to ${tx.receiver} from ${tx.location.city}</span>
                `;
                
                logItem.innerHTML = logMessage;
                logItem.txData = tx;
                logItem.addEventListener('click', () => {
                    showTransactionDetails(tx);
                });
                
                if (transactionLog) {
                    if (transactionLog.innerHTML.includes("Press 'Start Detection'")) {
                        transactionLog.innerHTML = '';
                    }
                    transactionLog.prepend(logItem);
                    if (transactionLog.children.length > 50) {
                        transactionLog.lastElementChild.remove();
                    }
                }

                if (tx.fraudStatus === 'risk-high' || tx.fraudStatus === 'risk-medium') {
                    showAlert(`Suspicious transaction detected! Score: ${tx.riskScore}`);
                }
                
                if (tx.fraudStatus === 'risk-high') {
                    if (!highRiskProfiles[tx.sender]) {
                        highRiskProfiles[tx.sender] = [];
                    }
                    highRiskProfiles[tx.sender].push(tx);
                    updateHighRiskProfilesList();
                }
            };

            const updateHighRiskProfilesList = () => {
                if (highRiskProfilesList) {
                    highRiskProfilesList.innerHTML = '';
                    const profileNames = Object.keys(highRiskProfiles);
                    if (profileNames.length === 0) {
                        highRiskProfilesList.innerHTML = `<p class="text-gray-500">No high-risk transactions detected yet.</p>`;
                        return;
                    }
                    profileNames.forEach(name => {
                        const profileItem = document.createElement('div');
                        profileItem.className = 'log-item risk-high-log cursor-pointer';
                        const latestTx = highRiskProfiles[name].slice(-1)[0];
                        profileItem.innerHTML = `
                            <strong>${name}</strong> <br>
                            <span class="text-gray-400 text-xs">Latest Fraud: $${latestTx.amount} | Score: ${latestTx.riskScore}</span>
                        `;
                        profileItem.addEventListener('click', () => showHistory(name));
                        highRiskProfilesList.appendChild(profileItem);
                    });
                }
            };

            const showHistory = (senderName) => {
                if (historyList) {
                    historyList.innerHTML = '';
                    const transactionsForUser = transactions.filter(tx => tx.sender === senderName);
                    if (historySenderName) historySenderName.textContent = senderName;
                    if (historyTotalTx) historyTotalTx.textContent = transactionsForUser.length;
                    if (historyFraudTx) historyFraudTx.textContent = transactionsForUser.filter(tx => tx.fraudStatus === 'risk-high').length;
                    
                    transactionsForUser.forEach(tx => {
                        const historyItem = document.createElement('div');
                        const statusColor = tx.fraudStatus === 'risk-high' ? 'text-red-400' : 'text-green-400';
                        historyItem.className = 'p-2 border-b border-gray-600 last:border-0';
                        historyItem.innerHTML = `
                            <p class="font-bold text-gray-300">$${tx.amount} <span class="${statusColor}">(${tx.fraudStatus})</span></p>
                            <p class="text-xs text-gray-400">ID: ${tx.id} | Location: ${tx.location.city} | Risk Score: ${tx.riskScore}</p>
                            <p class="text-xs text-gray-500">Reason: ${tx.reason}</p>
                        `;
                        historyList.appendChild(historyItem);
                    });
                }
                if (historyModal) historyModal.classList.remove('hidden');
            };
            
            const showAlert = (message) => {
                if(alertMessage) {
                    alertMessage.textContent = message;
                }
                if(alertBox) {
                    alertBox.style.display = 'block';
                    alertBox.style.animation = 'none';
                    void alertBox.offsetWidth;
                    alertBox.style.animation = 'fadeInOut 4s forwards';
                }
            };

            const drawSingleDot = (tx) => {
                const dot = document.createElement('div');
                dot.className = `dot ${tx.fraudStatus}`;
                dot.style.left = `${tx.x}px`;
                dot.style.top = `${tx.y}px`;
                dot.addEventListener('click', () => {
                    showTransactionDetails(tx);
                });
                if (chartContainer) {
                    chartContainer.appendChild(dot);
                }
            };

            const updateStats = () => {
                totalFraud = transactions.filter(tx => tx.fraudStatus === 'risk-high').length;
                const normalCount = transactions.length - totalFraud;
                
                if (totalTransactionsEl) totalTransactionsEl.textContent = transactions.length;
                if (fraudCountEl) fraudCountEl.textContent = totalFraud;
                if (normalCountEl) normalCountEl.textContent = normalCount;

                const avgConfidence = transactions.length > 0 ? (transactions.reduce((sum, tx) => sum + parseFloat(tx.confidence), 0) / transactions.length).toFixed(2) : '0.00';
                
                if (metricsFraudEl) metricsFraudEl.textContent = totalFraud;
                if (metricsTimeEl) metricsTimeEl.textContent = `0.2s`;
                if (metricsConfidenceEl) metricsConfidenceEl.textContent = `${avgConfidence}%`;

                let classicalAccuracy, quantumAccuracy, classicalFP, quantumFP;
                if (transactions.length > 0) {
                    classicalAccuracy = (100 - (totalFraud / transactions.length * 100) * 0.8).toFixed(2);
                    quantumAccuracy = (100 - (totalFraud / transactions.length * 100) * 0.5).toFixed(2);
                    classicalFP = ((totalFraud / transactions.length) * 100 * 0.25).toFixed(2);
                    quantumFP = ((totalFraud / transactions.length) * 100 * 0.1).toFixed(2);
                } else {
                    classicalAccuracy = '0.00';
                    quantumAccuracy = '0.00';
                    classicalFP = '0.00';
                    quantumFP = '0.00';
                }
                if (classicalAccuracyEl) classicalAccuracyEl.textContent = `${classicalAccuracy}% Acc`;
                if (classicalFPEl) classicalFPEl.textContent = `${classicalFP}% FP`;
                if (quantumAccuracyEl) quantumAccuracyEl.textContent = `${quantumAccuracy}% Acc`;
                if (quantumFPEl) quantumFPEl.textContent = `${quantumFP}% FP`;
            };

            const generationLoop = () => {
                if (!isGenerating) {
                    if (loadingOverlay) loadingOverlay.classList.add('hidden');
                    return;
                }
                
                if (loadingOverlay) loadingOverlay.classList.remove('hidden');
                
                setTimeout(() => {
                    if (!isGenerating) {
                        if (loadingOverlay) loadingOverlay.classList.add('hidden');
                        return;
                    }

                    transactionCounter++;
                    const newTx = generateSingleTransaction();
                    transactions.push(newTx);
                    drawSingleDot(newTx);
                    addTransactionToLog(newTx);
                    updateStats();
                    updatePieChart();

                    generationLoop();
                }, 200);
            };
            
            const showTransactionDetails = (tx) => {
                currentTx = tx;
                const riskStatusText = tx.fraudStatus === 'risk-high' ? 'Confirmed Fraud' : tx.fraudStatus === 'risk-medium' ? 'Suspicious' : 'Normal';
                const statusColor = tx.fraudStatus === 'risk-high' ? 'red' : tx.fraudStatus === 'risk-medium' ? 'yellow' : 'green';

                if (modalContent) {
                    modalContent.innerHTML = `
                        <p><strong>Transaction ID:</strong> ${tx.id}</p>
                        <p><strong>Sender:</strong> ${tx.sender}</p>
                        <p><strong>Receiver:</strong> ${tx.receiver}</p>
                        <p><strong>Status:</strong> <span class="text-${statusColor}-400">${riskStatusText}</span></p>
                        <p><strong>Amount:</strong> $${tx.amount}</p>
                        <p><strong>Risk Score:</strong> ${tx.riskScore}/100</p>
                        <p><strong>Reason:</strong> ${tx.reason}</p>
                        <p><strong>Model Confidence:</strong> ${tx.confidence}%</p>
                        <p><strong>Time:</strong> ${tx.time}</p>
                        <p><strong>Originating IP:</strong> ${tx.ip}</p>
                    `;
                }

                if (fraudActionsPanel) {
                    if (tx.fraudStatus === 'risk-high' && userRoleSelect.value === 'admin') {
                        fraudActionsPanel.classList.remove('hidden');
                    } else {
                        fraudActionsPanel.classList.add('hidden');
                    }
                }
                if (modal) modal.classList.remove('hidden');
            };

            const hideModal = () => {
                if (modal) modal.classList.add('hidden');
            };

            const hideHistoryModal = () => {
                if (historyModal) historyModal.classList.add('hidden');
            };

            const updateRoleAccess = () => {
                const isAdmin = userRoleSelect.value === 'admin';
                if (resetBtn) resetBtn.disabled = !isAdmin;
                if (exportLogBtn) exportLogBtn.disabled = !isAdmin;
            };

            if(startDetectionBtn) {
                startDetectionBtn.addEventListener('click', () => {
                    if (isGenerating) return;
                    isGenerating = true;
                    if(startDetectionBtn) startDetectionBtn.classList.add('hidden');
                    if(stopDetectionBtn) stopDetectionBtn.classList.remove('hidden');
                    if(resetBtn) resetBtn.disabled = true;
                    if(exportLogBtn) exportLogBtn.disabled = true;
                    generationLoop();
                });
            }

            if(stopDetectionBtn) {
                stopDetectionBtn.addEventListener('click', () => {
                    isGenerating = false;
                    if(startDetectionBtn) startDetectionBtn.classList.remove('hidden');
                    if(stopDetectionBtn) stopDetectionBtn.classList.add('hidden');
                    if(resetBtn) resetBtn.disabled = false;
                    if(exportLogBtn) exportLogBtn.disabled = false;
                });
            }

            if(resetBtn) {
                resetBtn.addEventListener('click', () => {
                    isGenerating = false;
                    transactions.length = 0;
                    transactionCounter = 0;
                    highRiskProfiles = {};
                    updateHighRiskProfilesList();
                    if(chartContainer) {
                        chartContainer.innerHTML = '';
                        if (loadingOverlay) chartContainer.appendChild(loadingOverlay);
                    }
                    if(transactionLog) transactionLog.innerHTML = "<p class='text-gray-500'>Press 'Start Detection' to begin logging transactions.</p>";
                    
                    if (trendChart) {
                         trendChart.destroy();
                    }
                    if (pieChart) {
                        pieChart.destroy();
                    }
                    if (trendChartCanvas) {
                        const ctx = trendChartCanvas.getContext('2d');
                        trendChart = new Chart(ctx, {
                            type: 'line',
                            data: {
                                labels: [],
                                datasets: [{
                                    label: 'P(Fraud)',
                                    data: [],
                                    borderColor: 'rgb(255, 99, 132)',
                                    backgroundColor: 'rgba(255, 99, 132, 0.5)',
                                    tension: 0.4
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    y: {
                                        min: 0,
                                        max: 1,
                                        title: {
                                            display: true,
                                            text: 'Fraud Probability (P(F))'
                                        },
                                        ticks: { color: '#e2e8f0' }
                                    },
                                    x: {
                                        title: {
                                            display: true,
                                            text: 'Transaction ID'
                                        },
                                        ticks: { color: '#e2e8f0' }
                                    }
                                },
                                plugins: {
                                    legend: { display: false }
                                }
                            }
                        });
                    }
                    if (pieChartCanvas) {
                        const ctx = pieChartCanvas.getContext('2d');
                        pieChart = new Chart(ctx, {
                            type: 'doughnut',
                            data: {
                                labels: ['Normal', 'Suspicious', 'Fraud'],
                                datasets: [{
                                    data: [0, 0, 0],
                                    backgroundColor: ['#22c55e', '#f59e0b', '#ef4444'],
                                    hoverOffset: 4
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    datalabels: {
                                        color: '#fff',
                                        formatter: (value, ctx) => {
                                            let sum = 0;
                                            let dataArr = ctx.chart.data.datasets[0].data;
                                            dataArr.map(data => {
                                                sum += data;
                                            });
                                            let percentage = (value * 100 / sum).toFixed(2) + "%";
                                            return percentage;
                                        },
                                        font: {
                                            weight: 'bold'
                                        }
                                    },
                                    legend: {
                                        labels: {
                                            color: '#e2e8f0'
                                        }
                                    }
                                }
                            }
                        });
                    }

                    updateStats();
                    if(startDetectionBtn) startDetectionBtn.classList.remove('hidden');
                    if(stopDetectionBtn) stopDetectionBtn.classList.add('hidden');
                    updateRoleAccess();
                });
            }

            if(exportLogBtn) {
                exportLogBtn.addEventListener('click', () => {
                    const csvHeader = ["Transaction ID", "Timestamp", "Amount", "Risk Score", "Reason", "Fraud Status", "IP Address", "Location", "Sender", "Receiver"];
                    const csvRows = transactions.map(tx => [
                        tx.id,
                        tx.time,
                        `"${tx.amount}"`,
                        tx.riskScore,
                        `"${tx.reason}"`,
                        tx.fraudStatus,
                        tx.ip,
                        `"${tx.location.city}"`,
                        `"${tx.sender}"`,
                        `"${tx.receiver}"`
                    ].join(','));
                    
                    const csvString = [csvHeader.join(','), ...csvRows].join('\n');
                    
                    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
                    const link = document.createElement("a");
                    const url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", "quantumguard_audit_log.csv");
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                });
            }
            
            if(exportAnalyzerLogBtn) {
                exportAnalyzerLogBtn.addEventListener('click', () => {
                    const csvHeader = ["ID", "Amount", "Time", "Prediction", "Risk Score", "Explanation"];
                    const csvRows = analyzerResults.map(res => [
                        res.id,
                        res.amount,
                        res.time,
                        res.prediction,
                        res.riskScore,
                        `"${res.explanation}"`
                    ].join(','));
                    
                    const csvString = [csvHeader.join(','), ...csvRows].join('\n');
                    
                    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
                    const link = document.createElement("a");
                    const url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", "transcript_analysis_results.csv");
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                });
            }

            if(trackLocationBtn) {
                trackLocationBtn.addEventListener('click', () => {
                    if (currentTx && currentTx.location) {
                        const lat = currentTx.location.lat;
                        const lon = currentTx.location.lon;
                        const mapUrl = `https://www.google.com/maps/search/?api=1&query=${lat},${lon}`;
                        window.open(mapUrl, '_blank');
                    }
                });
            }

            if(falsePositiveBtn) {
                falsePositiveBtn.addEventListener('click', () => {
                    showAlert(`Transaction ${currentTx.id} marked as 'False Positive'`);
                    hideModal();
                });
            }

            if(freezeAccountBtn) {
                freezeAccountBtn.addEventListener('click', () => {
                    showAlert(`Account of ${currentTx.sender} frozen for review`);
                    hideModal();
                });
            }

            if(escalateBtn) {
                escalateBtn.addEventListener('click', () => {
                    showAlert(`Transaction ${currentTx.id} escalated for manual review`);
                    hideModal();
                });
            }

            if(closeModalBtn) {
                closeModalBtn.addEventListener('click', hideModal);
            }
            if(modal) {
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        hideModal();
                    }
                });
            }
            if(closeHistoryModalBtn) {
                closeHistoryModalBtn.addEventListener('click', hideHistoryModal);
            }
            if(historyModal) {
                historyModal.addEventListener('click', (e) => {
                    if (e.target === historyModal) {
                        hideHistoryModal();
                    }
                });
            }

            if(userRoleSelect) {
                userRoleSelect.addEventListener('change', updateRoleAccess);
            }
            
            const switchMode = (mode) => {
                if (preloadedPanels) {
                    preloadedPanels.classList.add('hidden');
                    preloadedPanels.classList.remove('contents');
                }
                if (realtimePanels) {
                    realtimePanels.classList.add('hidden');
                    realtimePanels.classList.remove('grid');
                }
                if (analyzerPanels) {
                    analyzerPanels.classList.add('hidden');
                    analyzerPanels.classList.remove('grid');
                }

                if (preloadedDataBtn) preloadedDataBtn.classList.add('bg-gray-600');
                if (preloadedDataBtn) preloadedDataBtn.classList.remove('bg-indigo-600');
                if (realtimeInputBtn) realtimeInputBtn.classList.add('bg-gray-600');
                if (realtimeInputBtn) realtimeInputBtn.classList.remove('bg-indigo-600');
                if (transcriptAnalyzerBtn) transcriptAnalyzerBtn.classList.add('bg-gray-600');
                if (transcriptAnalyzerBtn) transcriptAnalyzerBtn.classList.remove('bg-indigo-600');


                if (mode === 'preloaded') {
                    if (preloadedPanels) {
                        preloadedPanels.classList.remove('hidden');
                        preloadedPanels.classList.add('contents');
                    }
                    if (preloadedDataBtn) preloadedDataBtn.classList.remove('bg-gray-600');
                    if (preloadedDataBtn) preloadedDataBtn.classList.add('bg-indigo-600');
                    transactions.length = 0;
                    transactionCounter = 0;
                    highRiskProfiles = {};
                    updateHighRiskProfilesList();
                    if(chartContainer) {
                        chartContainer.innerHTML = '';
                        if (loadingOverlay) chartContainer.appendChild(loadingOverlay);
                    }
                    if(transactionLog) transactionLog.innerHTML = "<p class='text-gray-500'>Press 'Start Detection' to begin logging transactions.</p>";
                    updateStats();
                    if (trendChart) {
                        trendChart.destroy();
                    }
                    if (pieChart) {
                        pieChart.destroy();
                    }
                    if (trendChartCanvas) {
                        const ctx = trendChartCanvas.getContext('2d');
                        trendChart = new Chart(ctx, {
                            type: 'line',
                            data: {
                                labels: [],
                                datasets: [{
                                    label: 'P(Fraud)',
                                    data: [],
                                    borderColor: 'rgb(255, 99, 132)',
                                    backgroundColor: 'rgba(255, 99, 132, 0.5)',
                                    tension: 0.4
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    y: {
                                        min: 0,
                                        max: 1,
                                        title: {
                                            display: true,
                                            text: 'Fraud Probability (P(F))'
                                        },
                                        ticks: { color: '#e2e8f0' }
                                    },
                                    x: {
                                        title: {
                                            display: true,
                                            text: 'Transaction ID'
                                        },
                                        ticks: { color: '#e2e8f0' }
                                    }
                                },
                                plugins: {
                                    legend: { display: false }
                                }
                            }
                        });
                    }
                    if (pieChartCanvas) {
                        const ctx = pieChartCanvas.getContext('2d');
                        pieChart = new Chart(ctx, {
                            type: 'doughnut',
                            data: {
                                labels: ['Normal', 'Suspicious', 'Fraud'],
                                datasets: [{
                                    data: [0, 0, 0],
                                    backgroundColor: ['#22c55e', '#f59e0b', '#ef4444'],
                                    hoverOffset: 4
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    datalabels: {
                                        color: '#fff',
                                        formatter: (value, ctx) => {
                                            let sum = 0;
                                            let dataArr = ctx.chart.data.datasets[0].data;
                                            dataArr.map(data => {
                                                sum += data;
                                            });
                                            let percentage = (value * 100 / sum).toFixed(2) + "%";
                                            return percentage;
                                        },
                                        font: {
                                            weight: 'bold'
                                        }
                                    },
                                    legend: {
                                        labels: {
                                            color: '#e2e8f0'
                                        }
                                    }
                                }
                            }
                        });
                    }
                } else if (mode === 'realtime') {
                    if (realtimePanels) {
                        realtimePanels.classList.remove('hidden');
                        realtimePanels.classList.add('grid');
                    }
                    if (realtimeInputBtn) realtimeInputBtn.classList.remove('bg-gray-600');
                    if (realtimeInputBtn) realtimeInputBtn.classList.add('bg-indigo-600');
                    transactions.length = 0;
                    transactionCounter = 0;
                    highRiskProfiles = {};
                    updateHighRiskProfilesList();
                    if(chartContainer) {
                        chartContainer.innerHTML = '';
                    }
                    if (liveResultsTable) {
                         liveResultsTable.innerHTML = `<tr class="text-gray-300"><td class="py-3 px-4">N/A</td><td class="py-3 px-4">N/A</td><td class="py-3 px-4">N/A</td><td class="py-3 px-4">N/A</td></tr>`;
                    }
                    if (trendChart) {
                        trendChart.destroy();
                    }
                    if (pieChart) {
                        pieChart.destroy();
                    }
                    if (trendChartCanvas) {
                        const ctx = trendChartCanvas.getContext('2d');
                        trendChart = new Chart(ctx, {
                            type: 'line',
                            data: {
                                labels: [],
                                datasets: [{
                                    label: 'P(Fraud)',
                                    data: [],
                                    borderColor: 'rgb(255, 99, 132)',
                                    backgroundColor: 'rgba(255, 99, 132, 0.5)',
                                    tension: 0.4
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    y: {
                                        min: 0,
                                        max: 1,
                                        title: {
                                            display: true,
                                            text: 'Fraud Probability (P(F))'
                                        },
                                        ticks: { color: '#e2e8f0' }
                                    },
                                    x: {
                                        title: {
                                            display: true,
                                            text: 'Transaction ID'
                                        },
                                        ticks: { color: '#e2e8f0' }
                                    }
                                },
                                plugins: {
                                    legend: { display: false }
                                }
                            }
                        });
                    }
                    if (pieChartCanvas) {
                        const ctx = pieChartCanvas.getContext('2d');
                        pieChart = new Chart(ctx, {
                            type: 'doughnut',
                            data: {
                                labels: ['Normal', 'Suspicious', 'Fraud'],
                                datasets: [{
                                    data: [0, 0, 0],
                                    backgroundColor: ['#22c55e', '#f59e0b', '#ef4444'],
                                    hoverOffset: 4
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    datalabels: {
                                        color: '#fff',
                                        formatter: (value, ctx) => {
                                            let sum = 0;
                                            let dataArr = ctx.chart.data.datasets[0].data;
                                            dataArr.map(data => {
                                                sum += data;
                                            });
                                            let percentage = (value * 100 / sum).toFixed(2) + "%";
                                            return percentage;
                                        },
                                        font: {
                                            weight: 'bold'
                                        }
                                    },
                                    legend: {
                                        labels: {
                                            color: '#e2e8f0'
                                        }
                                    }
                                }
                            }
                        });
                    }
                    updateStats();
                } else if (mode === 'analyzer') {
                    if (analyzerPanels) {
                        analyzerPanels.classList.remove('hidden');
                        analyzerPanels.classList.add('grid');
                    }
                    if (transcriptAnalyzerBtn) transcriptAnalyzerBtn.classList.remove('bg-gray-600');
                    if (transcriptAnalyzerBtn) transcriptAnalyzerBtn.classList.add('bg-indigo-600');
                    
                    transactions.length = 0;
                    transactionCounter = 0;
                    highRiskProfiles = {};
                    updateHighRiskProfilesList();
                    if (analyzerResultsBody) analyzerResultsBody.innerHTML = '';
                    if (analyzerSummaryTotal) analyzerSummaryTotal.textContent = 0;
                    if (analyzerSummaryFraud) analyzerSummaryFraud.textContent = 0;
                    if (analyzerSummaryConfidence) analyzerSummaryConfidence.textContent = '0%';
                }
            };
            
            if (preloadedDataBtn) preloadedDataBtn.addEventListener('click', () => switchMode('preloaded'));
            if (realtimeInputBtn) realtimeInputBtn.addEventListener('click', () => switchMode('realtime'));
            if (transcriptAnalyzerBtn) transcriptAnalyzerBtn.addEventListener('click', () => switchMode('analyzer'));

            if (uploadBtn) {
                uploadBtn.addEventListener('click', () => {
                    if (fileInput) {
                        fileInput.click();
                    }
                });
            }
            if (fileInput) {
                fileInput.addEventListener('change', (event) => {
                    const file = event.target.files[0];
                    if (file) {
                        if (fileName) fileName.textContent = file.name;
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            const content = e.target.result;
                            processTranscriptAnalysis(content);
                        };
                        reader.readAsText(file);
                    }
                });
            }
            
            if(submitTransactionBtn) {
                submitTransactionBtn.addEventListener('click', () => {
                    const amount = inputAmount.value;
                    const time = inputTime.value;
                    const location = inputLocation.value;
                    
                    if (!amount || !time || !location) {
                        showAlert('Please fill in all transaction fields.');
                        return;
                    }
                    
                    processRealtimeTransaction(amount, time, location);
                });
            }

            if (trendChartCanvas) {
                const ctx = trendChartCanvas.getContext('2d');
                trendChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [{
                            label: 'P(Fraud)',
                            data: [],
                            borderColor: 'rgb(255, 99, 132)',
                            backgroundColor: 'rgba(255, 99, 132, 0.5)',
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                min: 0,
                                max: 1,
                                title: {
                                    display: true,
                                    text: 'Fraud Probability (P(F))'
                                },
                                ticks: { color: '#e2e8f0' }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Transaction ID'
                                },
                                ticks: { color: '#e2e8f0' }
                            }
                        },
                        plugins: {
                            legend: { display: false }
                        }
                    }
                });
            }

            if (pieChartCanvas) {
                const ctx = pieChartCanvas.getContext('2d');
                pieChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Normal', 'Suspicious', 'Fraud'],
                        datasets: [{
                            data: [0, 0, 0],
                            backgroundColor: ['#22c55e', '#f59e0b', '#ef4444'],
                            hoverOffset: 4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            datalabels: {
                                color: '#fff',
                                formatter: (value, ctx) => {
                                    let sum = 0;
                                    let dataArr = ctx.chart.data.datasets[0].data;
                                    dataArr.map(data => {
                                        sum += data;
                                    });
                                    let percentage = (value * 100 / sum).toFixed(2) + "%";
                                    return percentage;
                                },
                                font: {
                                    weight: 'bold'
                                }
                            },
                            legend: {
                                labels: {
                                    color: '#e2e8f0'
                                }
                            }
                        }
                    }
                });
            }
            
            updateChartSize();
            updateRoleAccess();
            updateStats();
            switchMode('preloaded');
        });
    </script>
</body>
</html>